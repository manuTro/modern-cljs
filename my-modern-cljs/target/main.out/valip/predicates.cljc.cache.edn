;; Analyzed by ClojureScript 1.7.170
{:name valip.predicates, :doc "Predicates useful for validating input strings, such as ones from HTML forms.", :excludes #{}, :use-macros {defpredicate valip.macros}, :require-macros {valip.macros valip.macros}, :uses {read-string cljs.reader}, :requires {str clojure.string, clojure.string clojure.string, cljs.reader cljs.reader, Uri goog.Uri}, :imports {Uri goog.Uri}, :defs {present? {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :line 32, :column 7, :end-line 32, :end-column 15, :arglists (quote ([x])), :doc "Returns false if x is nil or blank, true otherwise."}, :name valip.predicates/present?, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns false if x is nil or blank, true otherwise."}, decimal-string? {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :line 72, :column 7, :end-line 72, :end-column 22, :arglists (quote ([s])), :doc "Returns true if the string represents a decimal number."}, :name valip.predicates/decimal-string?, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :end-column 22, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Returns true if the string represents a decimal number."}, lt {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :line 97, :column 7, :end-line 97, :end-column 9, :arglists (quote ([n])), :doc "Creates a predicate function for checking if a value is numerically less\n  than the specified number."}, :name valip.predicates/lt, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :end-column 9, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Creates a predicate function for checking if a value is numerically less\n  than the specified number."}, over {:name valip.predicates/over, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :line 115, :column 1, :end-line 115, :end-column 10, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :line 115, :column 6, :end-line 115, :end-column 10}, :doc "Alias for gt"}, at-most {:name valip.predicates/at-most, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :line 121, :column 1, :end-line 121, :end-column 13, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :line 121, :column 6, :end-line 121, :end-column 13}, :doc "Alias for lte"}, under {:name valip.predicates/under, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :line 117, :column 1, :end-line 117, :end-column 11, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :line 117, :column 6, :end-line 117, :end-column 11}, :doc "Alias for lt"}, max-length {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :line 43, :column 7, :end-line 43, :end-column 17, :arglists (quote ([max])), :doc "Creates a predicate that returns true if a string's length is less than or\n  equal to the supplied maximum."}, :name valip.predicates/max-length, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :end-column 17, :method-params ([max]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([max])), :doc "Creates a predicate that returns true if a string's length is less than or\n  equal to the supplied maximum."}, min-length {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :line 49, :column 7, :end-line 49, :end-column 17, :arglists (quote ([min])), :doc "Creates a predicate that returns true if a string's length is greater than\n  or equal to the supplied minimum."}, :name valip.predicates/min-length, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :end-column 17, :method-params ([min]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists (quote ([min])), :doc "Creates a predicate that returns true if a string's length is greater than\n  or equal to the supplied minimum."}, integer-string? {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :line 67, :column 7, :end-line 67, :end-column 22, :arglists (quote ([s])), :doc "Returns true if the string represents an integer."}, :name valip.predicates/integer-string?, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :end-column 22, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Returns true if the string represents an integer."}, alphanumeric? {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :line 82, :column 7, :end-line 82, :end-column 20, :arglists (quote ([s])), :doc "Returns true if a string consists only of alphanumeric characters."}, :name valip.predicates/alphanumeric?, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :end-column 20, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Returns true if a string consists only of alphanumeric characters."}, url? {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :line 141, :column 23, :end-line 141, :end-column 27, :arglists (quote ([s]))}, :name valip.predicates/url?, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :end-column 27, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 17, :line 141, :end-line 141, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, digits? {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :line 77, :column 7, :end-line 77, :end-column 14, :arglists (quote ([s])), :doc "Returns true if a string consists only of numerical digits."}, :name valip.predicates/digits?, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :end-column 14, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Returns true if a string consists only of numerical digits."}, between {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :line 123, :column 7, :end-line 123, :end-column 14, :arglists (quote ([min max])), :doc "Creates a predicate function for checking whether a number is between two\n  values (inclusive)."}, :name valip.predicates/between, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :end-column 14, :method-params ([min max]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 2, :fn-var true, :arglists (quote ([min max])), :doc "Creates a predicate function for checking whether a number is between two\n  values (inclusive)."}, gte {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :line 103, :column 7, :end-line 103, :end-column 10, :arglists (quote ([n])), :doc "Creates a predicate function for checking if a value is numerically greater\n  than or equal to the specified number."}, :name valip.predicates/gte, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :end-column 10, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Creates a predicate function for checking if a value is numerically greater\n  than or equal to the specified number."}, matches {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :line 37, :column 7, :end-line 37, :end-column 14, :arglists (quote ([re])), :doc "Creates a predicate that returns true if the supplied regular expression\n  matches its argument."}, :name valip.predicates/matches, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :end-column 14, :method-params ([re]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([re])), :doc "Creates a predicate that returns true if the supplied regular expression\n  matches its argument."}, at-least {:name valip.predicates/at-least, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :line 119, :column 1, :end-line 119, :end-column 14, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :line 119, :column 6, :end-line 119, :end-column 14}, :doc "Alias for gte"}, email-address? {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :line 55, :column 7, :end-line 55, :end-column 21, :arglists (quote ([email])), :doc "Returns true if the email address is valid, based on RFC 2822. Email\n  addresses containing quotation marks or square brackets are considered\n  invalid, as this syntax is not commonly supported in practise. The domain of\n  the email address is not checked for validity."}, :name valip.predicates/email-address?, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :end-column 21, :method-params ([email]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 1, :fn-var true, :arglists (quote ([email])), :doc "Returns true if the email address is valid, based on RFC 2822. Email\n  addresses containing quotation marks or square brackets are considered\n  invalid, as this syntax is not commonly supported in practise. The domain of\n  the email address is not checked for validity."}, gt {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :line 91, :column 7, :end-line 91, :end-column 9, :arglists (quote ([n])), :doc "Creates a predicate function for checking if a value is numerically greater\n  than the specified number."}, :name valip.predicates/gt, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :end-column 9, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Creates a predicate function for checking if a value is numerically greater\n  than the specified number."}, lte {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :line 109, :column 7, :end-line 109, :end-column 10, :arglists (quote ([n])), :doc "Creates a predicate function for checking if a value is numerically less\n  than or equal to the specified number."}, :name valip.predicates/lte, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :end-column 10, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Creates a predicate function for checking if a value is numerically less\n  than or equal to the specified number."}, parse-number {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :line 87, :column 8, :end-line 87, :end-column 20, :private true, :arglists (quote ([x]))}, :private true, :name valip.predicates/parse-number, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/valip/predicates.cljc", :end-column 20, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}}}