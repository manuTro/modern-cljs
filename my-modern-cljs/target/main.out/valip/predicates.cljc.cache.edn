;; Analyzed by ClojureScript 1.7.170
{:name valip.predicates, :doc "Predicates useful for validating input strings, such as ones from HTML forms.", :excludes #{}, :use-macros {defpredicate valip.macros}, :require-macros {valip.macros valip.macros}, :uses {read-string cljs.reader}, :requires {str clojure.string, clojure.string clojure.string, cljs.reader cljs.reader, Uri goog.Uri}, :imports {Uri goog.Uri}, :defs {present? {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :line 16, :column 7, :end-line 16, :end-column 15, :arglists (quote ([x])), :doc "Returns false if x is nil or blank, true otherwise."}, :name valip.predicates/present?, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :end-column 15, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns false if x is nil or blank, true otherwise."}, decimal-string? {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :line 56, :column 7, :end-line 56, :end-column 22, :arglists (quote ([s])), :doc "Returns true if the string represents a decimal number."}, :name valip.predicates/decimal-string?, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :end-column 22, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Returns true if the string represents a decimal number."}, lt {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :line 81, :column 7, :end-line 81, :end-column 9, :arglists (quote ([n])), :doc "Creates a predicate function for checking if a value is numerically less\n  than the specified number."}, :name valip.predicates/lt, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :end-column 9, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Creates a predicate function for checking if a value is numerically less\n  than the specified number."}, over {:name valip.predicates/over, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :line 99, :column 1, :end-line 99, :end-column 10, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :line 99, :column 6, :end-line 99, :end-column 10}, :doc "Alias for gt"}, at-most {:name valip.predicates/at-most, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :line 105, :column 1, :end-line 105, :end-column 13, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :line 105, :column 6, :end-line 105, :end-column 13}, :doc "Alias for lte"}, under {:name valip.predicates/under, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :line 101, :column 1, :end-line 101, :end-column 11, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :line 101, :column 6, :end-line 101, :end-column 11}, :doc "Alias for lt"}, max-length {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :line 27, :column 7, :end-line 27, :end-column 17, :arglists (quote ([max])), :doc "Creates a predicate that returns true if a string's length is less than or\n  equal to the supplied maximum."}, :name valip.predicates/max-length, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :end-column 17, :method-params ([max]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([max])), :doc "Creates a predicate that returns true if a string's length is less than or\n  equal to the supplied maximum."}, min-length {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :line 33, :column 7, :end-line 33, :end-column 17, :arglists (quote ([min])), :doc "Creates a predicate that returns true if a string's length is greater than\n  or equal to the supplied minimum."}, :name valip.predicates/min-length, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :end-column 17, :method-params ([min]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([min])), :doc "Creates a predicate that returns true if a string's length is greater than\n  or equal to the supplied minimum."}, integer-string? {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :line 51, :column 7, :end-line 51, :end-column 22, :arglists (quote ([s])), :doc "Returns true if the string represents an integer."}, :name valip.predicates/integer-string?, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :end-column 22, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Returns true if the string represents an integer."}, alphanumeric? {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :line 66, :column 7, :end-line 66, :end-column 20, :arglists (quote ([s])), :doc "Returns true if a string consists only of alphanumeric characters."}, :name valip.predicates/alphanumeric?, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :end-column 20, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Returns true if a string consists only of alphanumeric characters."}, url? {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :line 125, :column 16, :end-line 125, :end-column 20, :arglists (quote ([s]))}, :name valip.predicates/url?, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :end-column 20, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 10, :line 125, :end-line 125, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, digits? {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :line 61, :column 7, :end-line 61, :end-column 14, :arglists (quote ([s])), :doc "Returns true if a string consists only of numerical digits."}, :name valip.predicates/digits?, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :end-column 14, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Returns true if a string consists only of numerical digits."}, between {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :line 107, :column 7, :end-line 107, :end-column 14, :arglists (quote ([min max])), :doc "Creates a predicate function for checking whether a number is between two\n  values (inclusive)."}, :name valip.predicates/between, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :end-column 14, :method-params ([min max]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 2, :fn-var true, :arglists (quote ([min max])), :doc "Creates a predicate function for checking whether a number is between two\n  values (inclusive)."}, gte {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :line 87, :column 7, :end-line 87, :end-column 10, :arglists (quote ([n])), :doc "Creates a predicate function for checking if a value is numerically greater\n  than or equal to the specified number."}, :name valip.predicates/gte, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :end-column 10, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Creates a predicate function for checking if a value is numerically greater\n  than or equal to the specified number."}, matches {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :line 21, :column 7, :end-line 21, :end-column 14, :arglists (quote ([re])), :doc "Creates a predicate that returns true if the supplied regular expression\n  matches its argument."}, :name valip.predicates/matches, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :end-column 14, :method-params ([re]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([re])), :doc "Creates a predicate that returns true if the supplied regular expression\n  matches its argument."}, at-least {:name valip.predicates/at-least, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :line 103, :column 1, :end-line 103, :end-column 14, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :line 103, :column 6, :end-line 103, :end-column 14}, :doc "Alias for gte"}, email-address? {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :line 39, :column 7, :end-line 39, :end-column 21, :arglists (quote ([email])), :doc "Returns true if the email address is valid, based on RFC 2822. Email\n  addresses containing quotation marks or square brackets are considered\n  invalid, as this syntax is not commonly supported in practise. The domain of\n  the email address is not checked for validity."}, :name valip.predicates/email-address?, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :end-column 21, :method-params ([email]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists (quote ([email])), :doc "Returns true if the email address is valid, based on RFC 2822. Email\n  addresses containing quotation marks or square brackets are considered\n  invalid, as this syntax is not commonly supported in practise. The domain of\n  the email address is not checked for validity."}, gt {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :line 75, :column 7, :end-line 75, :end-column 9, :arglists (quote ([n])), :doc "Creates a predicate function for checking if a value is numerically greater\n  than the specified number."}, :name valip.predicates/gt, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :end-column 9, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Creates a predicate function for checking if a value is numerically greater\n  than the specified number."}, lte {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :line 93, :column 7, :end-line 93, :end-column 10, :arglists (quote ([n])), :doc "Creates a predicate function for checking if a value is numerically less\n  than or equal to the specified number."}, :name valip.predicates/lte, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :end-column 10, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n])), :doc "Creates a predicate function for checking if a value is numerically less\n  than or equal to the specified number."}, parse-number {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :line 71, :column 8, :end-line 71, :end-column 20, :private true, :arglists (quote ([x]))}, :private true, :name valip.predicates/parse-number, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/8ur/hpj86j/main.out/valip/predicates.cljc", :end-column 20, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}}}