;; Analyzed by ClojureScript 1.7.170
{:name valip.core, :doc "Functional validations.", :excludes #{}, :use-macros nil, :require-macros nil, :uses nil, :requires nil, :imports nil, :defs {validation-on {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/7ko/ruawdm/main.out/valip/core.cljc", :line 4, :column 7, :end-line 4, :end-column 20, :arglists (quote ([key pred? error])), :doc "Performs a validation on a key in a map using the supplied predicate\n  function. A {key [error]} map is returned if the predicate returns false;\n  nil is returned if the predicate returns true."}, :name valip.core/validation-on, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/7ko/ruawdm/main.out/valip/core.cljc", :end-column 20, :method-params ([key pred? error]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 4, :max-fixed-arity 3, :fn-var true, :arglists (quote ([key pred? error])), :doc "Performs a validation on a key in a map using the supplied predicate\n  function. A {key [error]} map is returned if the predicate returns false;\n  nil is returned if the predicate returns true."}, merge-errors {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/7ko/ruawdm/main.out/valip/core.cljc", :line 14, :column 7, :end-line 14, :end-column 19, :arglists (quote ([& error-maps])), :doc "Merge error maps returned by from the validation-on function.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(error-maps)], :arglists ([& error-maps]), :arglists-meta (nil)}}, :name valip.core/merge-errors, :variadic true, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/7ko/ruawdm/main.out/valip/core.cljc", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(error-maps)], :arglists ([& error-maps]), :arglists-meta (nil)}, :method-params [(error-maps)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 0, :fn-var true, :arglists ([& error-maps]), :doc "Merge error maps returned by from the validation-on function."}, validate {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/7ko/ruawdm/main.out/valip/core.cljc", :line 19, :column 7, :end-line 19, :end-column 15, :arglists (quote ([value-map & validations])), :doc "Validate a map of values using the supplied validations. Each validation\n  is represented as a vector containing [key predicate? error] values. A map\n  is returned for all the keys that failed their predicates, in the form:\n  {key [errors]}. If no predicates return false, nil is returned.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(value-map validations)], :arglists ([value-map & validations]), :arglists-meta (nil)}}, :name valip.core/validate, :variadic true, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/7ko/ruawdm/main.out/valip/core.cljc", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(value-map validations)], :arglists ([value-map & validations]), :arglists-meta (nil)}, :method-params [(value-map validations)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists ([value-map & validations]), :doc "Validate a map of values using the supplied validations. Each validation\n  is represented as a vector containing [key predicate? error] values. A map\n  is returned for all the keys that failed their predicates, in the form:\n  {key [errors]}. If no predicates return false, nil is returned."}}}