;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name shoreleave.remotes.http-rpc, :imports nil, :requires {xhr shoreleave.remotes.xhr, shoreleave.remotes.xhr shoreleave.remotes.xhr, reader cljs.reader, cljs.reader cljs.reader}, :uses nil, :defs {*remote-uri* {:name shoreleave.remotes.http-rpc/*remote-uri*, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/shoreleave/remotes/http_rpc.cljs", :line 25, :column 1, :end-line 25, :end-column 28, :dynamic true, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/shoreleave/remotes/http_rpc.cljs", :line 25, :column 16, :end-line 25, :end-column 28, :dynamic true}}, remote-callback {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/shoreleave/remotes/http_rpc.cljs", :line 27, :column 7, :end-line 27, :end-column 22, :arglists (quote ([remote params callback & extra-content])), :doc "Call a remote-callback on the server.\n  Arguments:\n    remote - a string, the name of the remote on the server (eg. specified with a defremote)\n    params - a vector, the parameters to pass to the remote function\n    callback - a map or a function.  The map specifies {:on-success some-f, :on-error another-f}\n                otherwise, just a single function that will be called with on-complete is triggered\n    extra-content - varlist of key-value pairs, extra-content to merge into the payload/content map.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(remote params callback extra-content)], :arglists ([remote params callback & extra-content]), :arglists-meta (nil)}}, :name shoreleave.remotes.http-rpc/remote-callback, :variadic true, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/abt/hpj86j/main.out/shoreleave/remotes/http_rpc.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(remote params callback extra-content)], :arglists ([remote params callback & extra-content]), :arglists-meta (nil)}, :method-params [(remote params callback extra-content)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 3, :fn-var true, :arglists ([remote params callback & extra-content]), :doc "Call a remote-callback on the server.\n  Arguments:\n    remote - a string, the name of the remote on the server (eg. specified with a defremote)\n    params - a vector, the parameters to pass to the remote function\n    callback - a map or a function.  The map specifies {:on-success some-f, :on-error another-f}\n                otherwise, just a single function that will be called with on-complete is triggered\n    extra-content - varlist of key-value pairs, extra-content to merge into the payload/content map."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:remote :content :params :on-success :post :on-error}, :order [:on-success :on-error :post :content :remote :params]}, :doc "Remote procedure calls over HTTP"}