;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name shoreleave.remotes.common, :imports nil, :requires {r-protocols shoreleave.remotes.protocols, shoreleave.remotes.protocols shoreleave.remotes.protocols, gevent goog.net.EventType, goog.string goog.string, goog.Uri.QueryData goog.Uri.QueryData, shoreleave.browser.cookies shoreleave.browser.cookies, query-data goog.Uri.QueryData, cstr clojure.string, goog.net.EventType goog.net.EventType, cookies shoreleave.browser.cookies, goog.structs goog.structs, structs goog.structs, clojure.string clojure.string, gstr goog.string}, :uses nil, :defs {event-types {:name shoreleave.remotes.common/event-types, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/brd/hpj86j/main.out/shoreleave/remotes/common.cljs", :line 14, :column 1, :end-line 14, :end-column 17, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/brd/hpj86j/main.out/shoreleave/remotes/common.cljs", :line 14, :column 6, :end-line 14, :end-column 17}}, *csrf-token-name* {:name shoreleave.remotes.common/*csrf-token-name*, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/brd/hpj86j/main.out/shoreleave/remotes/common.cljs", :line 21, :column 1, :end-line 21, :end-column 33, :dynamic true, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/brd/hpj86j/main.out/shoreleave/remotes/common.cljs", :line 21, :column 16, :end-line 21, :end-column 33, :dynamic true}}, rand-id-str {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/brd/hpj86j/main.out/shoreleave/remotes/common.cljs", :line 23, :column 7, :end-line 23, :end-column 18, :arglists (quote ([])), :doc "Generate a random string that is suitable for request IDs"}, :name shoreleave.remotes.common/rand-id-str, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/brd/hpj86j/main.out/shoreleave/remotes/common.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Generate a random string that is suitable for request IDs"}, ->url-method {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/brd/hpj86j/main.out/shoreleave/remotes/common.cljs", :line 28, :column 7, :end-line 28, :end-column 19, :arglists (quote ([m])), :doc "Given the keyword form of a request method (`:post`),\n  return Closure acceptable form (an upper-cased string)"}, :name shoreleave.remotes.common/->url-method, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/brd/hpj86j/main.out/shoreleave/remotes/common.cljs", :end-column 19, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Given the keyword form of a request method (`:post`),\n  return Closure acceptable form (an upper-cased string)"}, parse-route {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/brd/hpj86j/main.out/shoreleave/remotes/common.cljs", :line 34, :column 7, :end-line 34, :end-column 18, :arglists (quote ([route])), :doc "Shape the routes accordingly for Closure's XHR calls"}, :name shoreleave.remotes.common/parse-route, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/brd/hpj86j/main.out/shoreleave/remotes/common.cljs", :end-column 18, :method-params ([route]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([route])), :doc "Shape the routes accordingly for Closure's XHR calls"}, ->simple-callback {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/brd/hpj86j/main.out/shoreleave/remotes/common.cljs", :line 43, :column 7, :end-line 43, :end-column 24, :arglists (quote ([callback])), :doc "Liberate all client-side developers!\n  Given a simple callback function, automatically pass it the response\n  content from a remote call"}, :name shoreleave.remotes.common/->simple-callback, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/brd/hpj86j/main.out/shoreleave/remotes/common.cljs", :end-column 24, :method-params ([callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([callback])), :doc "Liberate all client-side developers!\n  Given a simple callback function, automatically pass it the response\n  content from a remote call"}, csrf-protected {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/brd/hpj86j/main.out/shoreleave/remotes/common.cljs", :line 53, :column 7, :end-line 53, :end-column 21, :arglists (quote ([content-map method])), :doc "For all POST requests, if ring-anti-forgery is used, pack the CSRF token\n  into the content being sent to the server.\n  Content is always sent to the server as a map (that later gets converted accordingly)"}, :name shoreleave.remotes.common/csrf-protected, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/brd/hpj86j/main.out/shoreleave/remotes/common.cljs", :end-column 21, :method-params ([content-map method]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 2, :fn-var true, :arglists (quote ([content-map method])), :doc "For all POST requests, if ring-anti-forgery is used, pack the CSRF token\n  into the content being sent to the server.\n  Content is always sent to the server as a map (that later gets converted accordingly)"}, ->data-str {:protocol-inline nil, :meta {:file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/brd/hpj86j/main.out/shoreleave/remotes/common.cljs", :line 82, :column 7, :end-line 82, :end-column 17, :arglists (quote ([d])), :doc "Generate a query-data-string, given Clojure data (usually a hash-map or string)"}, :name shoreleave.remotes.common/->data-str, :variadic false, :file "/home/manuela/.boot/cache/tmp/home/manuela/stage/clojurescript/modern-cljs/my-modern-cljs/brd/hpj86j/main.out/shoreleave/remotes/common.cljs", :end-column 17, :method-params ([d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 1, :fn-var true, :arglists (quote ([d])), :doc "Generate a query-data-string, given Clojure data (usually a hash-map or string)"}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else :on-success :on-timeout :on-ready :on-error :__anti-forgery-token :on-complete}, :order [:on-complete :on-success :on-error :on-timeout :on-ready :__anti-forgery-token :else]}, :doc "Common remote operations for packaging up calls"}